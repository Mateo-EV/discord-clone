// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model User {
  id       String @id @default(cuid())
  name     String @db.VarChar(50)
  email    String @unique @db.VarChar(250)
  password String @db.VarChar(60)

  image Image? @relation("UserImage")

  servers  Server[]
  members  Member[]
  channels Channel[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Server {
  id         String @id @default(cuid())
  name       String
  inviteCode String @unique @db.VarChar(250)

  image Image? @relation("ServerImage")

  members  Member[]
  channels Channel[]

  userId  String
  creator User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
}

enum MemberRole {
  ADMIN
  MODERATOR
  GUEST
}

model Member {
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  serverId String
  server   Server @relation(fields: [serverId], references: [id], onDelete: Cascade)

  role MemberRole @default(GUEST)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  messages               Message[]
  conversationsInitiated Conversation[]  @relation("MemberOne")
  conversationsReceived  Conversation[]  @relation("MemberTwo")
  directMessages         DirectMessage[]

  @@id([serverId, userId])
  @@index([userId])
  @@index([serverId])
}

enum ChannelType {
  TEXT
  AUDIO
  VIDEO
}

model Channel {
  id   String      @id @default(cuid())
  name String
  type ChannelType @default(TEXT)

  userId  String
  creator User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  serverId String
  server   Server @relation(fields: [serverId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  messages Message[]

  @@index([userId])
  @@index([serverId])
}

enum ImageableType {
  User
  Server
}

model Image {
  imageableId   String        @unique
  imageableType ImageableType

  url String @db.VarChar(250)

  User   User?   @relation("UserImage", fields: [imageableId], references: [id], map: "user_imageableId")
  Server Server? @relation("ServerImage", fields: [imageableId], references: [id], map: "server_imageableId", onDelete: Cascade)

  @@id([imageableId, imageableType])
}

model Message {
  id      String  @id @default(cuid())
  content String  @db.Text
  fileUrl String? @db.Text

  serverId String
  userId   String
  member   Member @relation(fields: [serverId, userId], references: [serverId, userId], onDelete: Cascade)

  channelId String
  channel   Channel @relation(fields: [channelId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  deleted Boolean @default(false)

  @@index([serverId, userId])
  @@index([channelId])
}

model Conversation {
  id String @id @default(cuid())

  memberServerId String

  memberOneUserId String
  memberOne       Member @relation("MemberOne", fields: [memberServerId, memberOneUserId], references: [serverId, userId], onDelete: Cascade)

  memberTwoUserId String
  memberTwo       Member @relation("MemberTwo", fields: [memberServerId, memberTwoUserId], references: [serverId, userId], onDelete: Cascade)

  directMessages DirectMessage[]

  @@unique([memberOneUserId, memberTwoUserId, memberServerId])
  @@index([memberServerId, memberOneUserId])
  @@index([memberServerId, memberTwoUserId])
}

model DirectMessage {
  id      String  @id @default(cuid())
  content String  @db.Text
  fileUrl String? @db.Text

  memberServerId String
  memberUserId   String
  member         Member @relation(fields: [memberServerId, memberUserId], references: [serverId, userId])

  conversationId String
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  deleted Boolean @default(false)

  @@index([memberServerId, memberUserId])
  @@index([conversationId])
}
